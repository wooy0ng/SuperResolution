{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCropSize = getCropSize;\nexports.restrictPosition = restrictPosition;\nexports.getDistanceBetweenPoints = getDistanceBetweenPoints;\nexports.getRotationBetweenPoints = getRotationBetweenPoints;\nexports.computeCroppedArea = computeCroppedArea;\nexports.getInitialCropFromCroppedAreaPixels = getInitialCropFromCroppedAreaPixels;\nexports.getCenter = getCenter;\nexports.rotateAroundMidPoint = rotateAroundMidPoint;\nexports.translateSize = translateSize;\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Compute the dimension of the crop area based on media size,\n * aspect ratio and optionally rotatation\n * @param {number} mediaWidth width of the src media in pixels\n * @param {number} mediaHeight height of the src media in pixels\n * @param {number} aspect aspect ratio of the crop\n * @param {rotation} rotation rotation in degrees\n */\n\n\nfunction getCropSize(mediaWidth, mediaHeight, aspect) {\n  var rotation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n  var _translateSize = translateSize(mediaWidth, mediaHeight, rotation),\n      width = _translateSize.width,\n      height = _translateSize.height;\n\n  if (mediaWidth >= mediaHeight * aspect && width > mediaHeight * aspect) {\n    return {\n      width: mediaHeight * aspect,\n      height: mediaHeight\n    };\n  }\n\n  if (width > mediaHeight * aspect) {\n    return {\n      width: mediaWidth,\n      height: mediaWidth / aspect\n    };\n  }\n\n  if (width > height * aspect) {\n    return {\n      width: height * aspect,\n      height: height\n    };\n  }\n\n  return {\n    width: width,\n    height: width / aspect\n  };\n}\n/**\n * Ensure a new media position stays in the crop area.\n * @param {{x: number, y number}} position new x/y position requested for the media\n * @param {{width: number, height: number}} mediaSize width/height of the src media\n * @param {{width: number, height: number}} cropSize width/height of the crop area\n * @param {number} zoom zoom value\n * @param {rotation} rotation rotation in degrees\n * @returns {{x: number, y number}}\n */\n\n\nfunction restrictPosition(position, mediaSize, cropSize, zoom) {\n  var rotation = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n\n  var _translateSize2 = translateSize(mediaSize.width, mediaSize.height, rotation),\n      width = _translateSize2.width,\n      height = _translateSize2.height;\n\n  return {\n    x: restrictPositionCoord(position.x, width, cropSize.width, zoom),\n    y: restrictPositionCoord(position.y, height, cropSize.height, zoom)\n  };\n}\n\nfunction restrictPositionCoord(position, mediaSize, cropSize, zoom) {\n  var maxPosition = mediaSize * zoom / 2 - cropSize / 2;\n  return Math.min(maxPosition, Math.max(position, -maxPosition));\n}\n\nfunction getDistanceBetweenPoints(pointA, pointB) {\n  return Math.sqrt(Math.pow(pointA.y - pointB.y, 2) + Math.pow(pointA.x - pointB.x, 2));\n}\n\nfunction getRotationBetweenPoints(pointA, pointB) {\n  return Math.atan2(pointB.y - pointA.y, pointB.x - pointA.x) * 180 / Math.PI;\n}\n/**\n * Compute the output cropped area of the media in percentages and pixels.\n * x/y are the top-left coordinates on the src media\n * @param {{x: number, y number}} crop x/y position of the current center of the media\n * @param {{width: number, height: number, naturalWidth: number, naturelHeight: number}} mediaSize width/height of the src media (default is size on the screen, natural is the original size)\n * @param {{width: number, height: number}} cropSize width/height of the crop area\n * @param {number} aspect aspect value\n * @param {number} zoom zoom value\n * @param {number} rotation rotation value (in deg)\n * @param {boolean} restrictPosition whether we should limit or not the cropped area\n */\n\n\nfunction computeCroppedArea(crop, mediaSize, cropSize, aspect, zoom) {\n  var rotation = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n  var restrictPosition = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true; // if the media is rotated by the user, we cannot limit the position anymore\n  // as it might need to be negative.\n\n  var limitAreaFn = restrictPosition && rotation === 0 ? limitArea : noOp;\n  var croppedAreaPercentages = {\n    x: limitAreaFn(100, ((mediaSize.width - cropSize.width / zoom) / 2 - crop.x / zoom) / mediaSize.width * 100),\n    y: limitAreaFn(100, ((mediaSize.height - cropSize.height / zoom) / 2 - crop.y / zoom) / mediaSize.height * 100),\n    width: limitAreaFn(100, cropSize.width / mediaSize.width * 100 / zoom),\n    height: limitAreaFn(100, cropSize.height / mediaSize.height * 100 / zoom) // we compute the pixels size naively\n\n  };\n  var widthInPixels = Math.round(limitAreaFn(mediaSize.naturalWidth, croppedAreaPercentages.width * mediaSize.naturalWidth / 100));\n  var heightInPixels = Math.round(limitAreaFn(mediaSize.naturalHeight, croppedAreaPercentages.height * mediaSize.naturalHeight / 100));\n  var isImgWiderThanHigh = mediaSize.naturalWidth >= mediaSize.naturalHeight * aspect; // then we ensure the width and height exactly match the aspect (to avoid rounding approximations)\n  // if the media is wider than high, when zoom is 0, the crop height will be equals to iamge height\n  // thus we want to compute the width from the height and aspect for accuracy.\n  // Otherwise, we compute the height from width and aspect.\n\n  var sizePixels = isImgWiderThanHigh ? {\n    width: Math.round(heightInPixels * aspect),\n    height: heightInPixels\n  } : {\n    width: widthInPixels,\n    height: Math.round(widthInPixels / aspect)\n  };\n\n  var croppedAreaPixels = _objectSpread({}, sizePixels, {\n    x: Math.round(limitAreaFn(mediaSize.naturalWidth - sizePixels.width, croppedAreaPercentages.x * mediaSize.naturalWidth / 100)),\n    y: Math.round(limitAreaFn(mediaSize.naturalHeight - sizePixels.height, croppedAreaPercentages.y * mediaSize.naturalHeight / 100))\n  });\n\n  return {\n    croppedAreaPercentages: croppedAreaPercentages,\n    croppedAreaPixels: croppedAreaPixels\n  };\n}\n/**\n * Ensure the returned value is between 0 and max\n * @param {number} max\n * @param {number} value\n */\n\n\nfunction limitArea(max, value) {\n  return Math.min(max, Math.max(0, value));\n}\n\nfunction noOp(max, value) {\n  return value;\n}\n/**\n * Compute the crop and zoom from the croppedAreaPixels\n * @param {{x: number, y: number, width: number, height: number}} croppedAreaPixels\n * @param {{width: number, height: number, naturalWidth: number, naturelHeight: number}} mediaSize width/height of the src media (default is size on the screen, natural is the original size)\n * @param {{width: number, height: number} | voiu} cropSize if this option is used by the user\n */\n\n\nfunction getZoomFromCroppedAreaPixels(croppedAreaPixels, mediaSize, cropSize) {\n  var mediaZoom = mediaSize.width / mediaSize.naturalWidth;\n\n  if (cropSize) {\n    var _isHeightMaxSize = cropSize.height > cropSize.width;\n\n    return _isHeightMaxSize ? cropSize.height / mediaZoom / croppedAreaPixels.height : cropSize.width / mediaZoom / croppedAreaPixels.width;\n  }\n\n  var aspect = croppedAreaPixels.width / croppedAreaPixels.height;\n  var isHeightMaxSize = mediaSize.naturalWidth >= mediaSize.naturalHeight * aspect;\n  return isHeightMaxSize ? mediaSize.naturalHeight / croppedAreaPixels.height : mediaSize.naturalWidth / croppedAreaPixels.width;\n}\n/**\n * Compute the crop and zoom from the croppedAreaPixels\n * @param {{x: number, y: number, width: number, height: number}} croppedAreaPixels\n * @param {{width: number, height: number, naturalWidth: number, naturelHeight: number}} mediaSize width/height of the src media (default is size on the screen, natural is the original size)\n * @param {{width: number, height: number} | voiu} cropSize if this option is used by the user\n */\n\n\nfunction getInitialCropFromCroppedAreaPixels(croppedAreaPixels, mediaSize, cropSize) {\n  var mediaZoom = mediaSize.width / mediaSize.naturalWidth;\n  var zoom = getZoomFromCroppedAreaPixels(croppedAreaPixels, mediaSize, cropSize);\n  var cropZoom = mediaZoom * zoom;\n  var crop = {\n    x: ((mediaSize.naturalWidth - croppedAreaPixels.width) / 2 - croppedAreaPixels.x) * cropZoom,\n    y: ((mediaSize.naturalHeight - croppedAreaPixels.height) / 2 - croppedAreaPixels.y) * cropZoom\n  };\n  return {\n    crop: crop,\n    zoom: zoom\n  };\n}\n/**\n * Return the point that is the center of point a and b\n * @param {{x: number, y: number}} a\n * @param {{x: number, y: number}} b\n */\n\n\nfunction getCenter(a, b) {\n  return {\n    x: (b.x + a.x) / 2,\n    y: (b.y + a.y) / 2\n  };\n}\n/**\n *\n * Returns an x,y point once rotated around xMid,yMid\n * @param {number} x\n * @param {number} y\n * @param {number} xMid\n * @param {number} yMid\n * @param {number} degrees\n */\n\n\nfunction rotateAroundMidPoint(x, y, xMid, yMid, degrees) {\n  var cos = Math.cos;\n  var sin = Math.sin;\n  var radian = degrees * Math.PI / 180; // Convert to radians\n  // Subtract midpoints, so that midpoint is translated to origin\n  // and add it in the end again\n\n  var xr = (x - xMid) * cos(radian) - (y - yMid) * sin(radian) + xMid;\n  var yr = (x - xMid) * sin(radian) + (y - yMid) * cos(radian) + yMid;\n  return [xr, yr];\n}\n/**\n *\n * Returns the new bounding area of a rotated rectangle.\n * @param {number} width\n * @param {number} height\n * @param {number} rotation\n */\n\n\nfunction translateSize(width, height, rotation) {\n  var centerX = width / 2;\n  var centerY = height / 2;\n  var outerBounds = [rotateAroundMidPoint(0, 0, centerX, centerY, rotation), rotateAroundMidPoint(width, 0, centerX, centerY, rotation), rotateAroundMidPoint(width, height, centerX, centerY, rotation), rotateAroundMidPoint(0, height, centerX, centerY, rotation)];\n\n  var _outerBounds$reduce = outerBounds.reduce(function (res, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        x = _ref2[0],\n        y = _ref2[1];\n\n    return {\n      minX: Math.min(x, 'minX' in res ? res.minX : x),\n      maxX: Math.max(x, 'maxX' in res ? res.maxX : x),\n      minY: Math.min(y, 'minY' in res ? res.minY : y),\n      maxY: Math.max(y, 'maxY' in res ? res.maxY : y)\n    };\n  }, {}),\n      minX = _outerBounds$reduce.minX,\n      maxX = _outerBounds$reduce.maxX,\n      minY = _outerBounds$reduce.minY,\n      maxY = _outerBounds$reduce.maxY;\n\n  return {\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}","map":{"version":3,"sources":["/usr/app/node_modules/react-bootstrap-image-cropper/node_modules/react-easy-crop/dist/helpers.js"],"names":["Object","defineProperty","exports","value","getCropSize","restrictPosition","getDistanceBetweenPoints","getRotationBetweenPoints","computeCroppedArea","getInitialCropFromCroppedAreaPixels","getCenter","rotateAroundMidPoint","translateSize","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","TypeError","_arr","_n","_d","_e","undefined","_i","Symbol","iterator","_s","next","done","push","length","err","Array","isArray","_objectSpread","target","arguments","source","ownKeys","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","obj","configurable","writable","mediaWidth","mediaHeight","aspect","rotation","_translateSize","width","height","position","mediaSize","cropSize","zoom","_translateSize2","x","restrictPositionCoord","y","maxPosition","Math","min","max","pointA","pointB","sqrt","pow","atan2","PI","crop","limitAreaFn","limitArea","noOp","croppedAreaPercentages","widthInPixels","round","naturalWidth","heightInPixels","naturalHeight","isImgWiderThanHigh","sizePixels","croppedAreaPixels","getZoomFromCroppedAreaPixels","mediaZoom","_isHeightMaxSize","isHeightMaxSize","cropZoom","a","b","xMid","yMid","degrees","cos","sin","radian","xr","yr","centerX","centerY","outerBounds","_outerBounds$reduce","reduce","res","_ref","_ref2","minX","maxX","minY","maxY"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCropSize = getCropSize;\nexports.restrictPosition = restrictPosition;\nexports.getDistanceBetweenPoints = getDistanceBetweenPoints;\nexports.getRotationBetweenPoints = getRotationBetweenPoints;\nexports.computeCroppedArea = computeCroppedArea;\nexports.getInitialCropFromCroppedAreaPixels = getInitialCropFromCroppedAreaPixels;\nexports.getCenter = getCenter;\nexports.rotateAroundMidPoint = rotateAroundMidPoint;\nexports.translateSize = translateSize;\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Compute the dimension of the crop area based on media size,\n * aspect ratio and optionally rotatation\n * @param {number} mediaWidth width of the src media in pixels\n * @param {number} mediaHeight height of the src media in pixels\n * @param {number} aspect aspect ratio of the crop\n * @param {rotation} rotation rotation in degrees\n */\nfunction getCropSize(mediaWidth, mediaHeight, aspect) {\n  var rotation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n  var _translateSize = translateSize(mediaWidth, mediaHeight, rotation),\n      width = _translateSize.width,\n      height = _translateSize.height;\n\n  if (mediaWidth >= mediaHeight * aspect && width > mediaHeight * aspect) {\n    return {\n      width: mediaHeight * aspect,\n      height: mediaHeight\n    };\n  }\n\n  if (width > mediaHeight * aspect) {\n    return {\n      width: mediaWidth,\n      height: mediaWidth / aspect\n    };\n  }\n\n  if (width > height * aspect) {\n    return {\n      width: height * aspect,\n      height: height\n    };\n  }\n\n  return {\n    width: width,\n    height: width / aspect\n  };\n}\n/**\n * Ensure a new media position stays in the crop area.\n * @param {{x: number, y number}} position new x/y position requested for the media\n * @param {{width: number, height: number}} mediaSize width/height of the src media\n * @param {{width: number, height: number}} cropSize width/height of the crop area\n * @param {number} zoom zoom value\n * @param {rotation} rotation rotation in degrees\n * @returns {{x: number, y number}}\n */\n\n\nfunction restrictPosition(position, mediaSize, cropSize, zoom) {\n  var rotation = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n\n  var _translateSize2 = translateSize(mediaSize.width, mediaSize.height, rotation),\n      width = _translateSize2.width,\n      height = _translateSize2.height;\n\n  return {\n    x: restrictPositionCoord(position.x, width, cropSize.width, zoom),\n    y: restrictPositionCoord(position.y, height, cropSize.height, zoom)\n  };\n}\n\nfunction restrictPositionCoord(position, mediaSize, cropSize, zoom) {\n  var maxPosition = mediaSize * zoom / 2 - cropSize / 2;\n  return Math.min(maxPosition, Math.max(position, -maxPosition));\n}\n\nfunction getDistanceBetweenPoints(pointA, pointB) {\n  return Math.sqrt(Math.pow(pointA.y - pointB.y, 2) + Math.pow(pointA.x - pointB.x, 2));\n}\n\nfunction getRotationBetweenPoints(pointA, pointB) {\n  return Math.atan2(pointB.y - pointA.y, pointB.x - pointA.x) * 180 / Math.PI;\n}\n/**\n * Compute the output cropped area of the media in percentages and pixels.\n * x/y are the top-left coordinates on the src media\n * @param {{x: number, y number}} crop x/y position of the current center of the media\n * @param {{width: number, height: number, naturalWidth: number, naturelHeight: number}} mediaSize width/height of the src media (default is size on the screen, natural is the original size)\n * @param {{width: number, height: number}} cropSize width/height of the crop area\n * @param {number} aspect aspect value\n * @param {number} zoom zoom value\n * @param {number} rotation rotation value (in deg)\n * @param {boolean} restrictPosition whether we should limit or not the cropped area\n */\n\n\nfunction computeCroppedArea(crop, mediaSize, cropSize, aspect, zoom) {\n  var rotation = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n  var restrictPosition = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;\n  // if the media is rotated by the user, we cannot limit the position anymore\n  // as it might need to be negative.\n  var limitAreaFn = restrictPosition && rotation === 0 ? limitArea : noOp;\n  var croppedAreaPercentages = {\n    x: limitAreaFn(100, ((mediaSize.width - cropSize.width / zoom) / 2 - crop.x / zoom) / mediaSize.width * 100),\n    y: limitAreaFn(100, ((mediaSize.height - cropSize.height / zoom) / 2 - crop.y / zoom) / mediaSize.height * 100),\n    width: limitAreaFn(100, cropSize.width / mediaSize.width * 100 / zoom),\n    height: limitAreaFn(100, cropSize.height / mediaSize.height * 100 / zoom) // we compute the pixels size naively\n\n  };\n  var widthInPixels = Math.round(limitAreaFn(mediaSize.naturalWidth, croppedAreaPercentages.width * mediaSize.naturalWidth / 100));\n  var heightInPixels = Math.round(limitAreaFn(mediaSize.naturalHeight, croppedAreaPercentages.height * mediaSize.naturalHeight / 100));\n  var isImgWiderThanHigh = mediaSize.naturalWidth >= mediaSize.naturalHeight * aspect; // then we ensure the width and height exactly match the aspect (to avoid rounding approximations)\n  // if the media is wider than high, when zoom is 0, the crop height will be equals to iamge height\n  // thus we want to compute the width from the height and aspect for accuracy.\n  // Otherwise, we compute the height from width and aspect.\n\n  var sizePixels = isImgWiderThanHigh ? {\n    width: Math.round(heightInPixels * aspect),\n    height: heightInPixels\n  } : {\n    width: widthInPixels,\n    height: Math.round(widthInPixels / aspect)\n  };\n\n  var croppedAreaPixels = _objectSpread({}, sizePixels, {\n    x: Math.round(limitAreaFn(mediaSize.naturalWidth - sizePixels.width, croppedAreaPercentages.x * mediaSize.naturalWidth / 100)),\n    y: Math.round(limitAreaFn(mediaSize.naturalHeight - sizePixels.height, croppedAreaPercentages.y * mediaSize.naturalHeight / 100))\n  });\n\n  return {\n    croppedAreaPercentages: croppedAreaPercentages,\n    croppedAreaPixels: croppedAreaPixels\n  };\n}\n/**\n * Ensure the returned value is between 0 and max\n * @param {number} max\n * @param {number} value\n */\n\n\nfunction limitArea(max, value) {\n  return Math.min(max, Math.max(0, value));\n}\n\nfunction noOp(max, value) {\n  return value;\n}\n/**\n * Compute the crop and zoom from the croppedAreaPixels\n * @param {{x: number, y: number, width: number, height: number}} croppedAreaPixels\n * @param {{width: number, height: number, naturalWidth: number, naturelHeight: number}} mediaSize width/height of the src media (default is size on the screen, natural is the original size)\n * @param {{width: number, height: number} | voiu} cropSize if this option is used by the user\n */\n\n\nfunction getZoomFromCroppedAreaPixels(croppedAreaPixels, mediaSize, cropSize) {\n  var mediaZoom = mediaSize.width / mediaSize.naturalWidth;\n\n  if (cropSize) {\n    var _isHeightMaxSize = cropSize.height > cropSize.width;\n\n    return _isHeightMaxSize ? cropSize.height / mediaZoom / croppedAreaPixels.height : cropSize.width / mediaZoom / croppedAreaPixels.width;\n  }\n\n  var aspect = croppedAreaPixels.width / croppedAreaPixels.height;\n  var isHeightMaxSize = mediaSize.naturalWidth >= mediaSize.naturalHeight * aspect;\n  return isHeightMaxSize ? mediaSize.naturalHeight / croppedAreaPixels.height : mediaSize.naturalWidth / croppedAreaPixels.width;\n}\n/**\n * Compute the crop and zoom from the croppedAreaPixels\n * @param {{x: number, y: number, width: number, height: number}} croppedAreaPixels\n * @param {{width: number, height: number, naturalWidth: number, naturelHeight: number}} mediaSize width/height of the src media (default is size on the screen, natural is the original size)\n * @param {{width: number, height: number} | voiu} cropSize if this option is used by the user\n */\n\n\nfunction getInitialCropFromCroppedAreaPixels(croppedAreaPixels, mediaSize, cropSize) {\n  var mediaZoom = mediaSize.width / mediaSize.naturalWidth;\n  var zoom = getZoomFromCroppedAreaPixels(croppedAreaPixels, mediaSize, cropSize);\n  var cropZoom = mediaZoom * zoom;\n  var crop = {\n    x: ((mediaSize.naturalWidth - croppedAreaPixels.width) / 2 - croppedAreaPixels.x) * cropZoom,\n    y: ((mediaSize.naturalHeight - croppedAreaPixels.height) / 2 - croppedAreaPixels.y) * cropZoom\n  };\n  return {\n    crop: crop,\n    zoom: zoom\n  };\n}\n/**\n * Return the point that is the center of point a and b\n * @param {{x: number, y: number}} a\n * @param {{x: number, y: number}} b\n */\n\n\nfunction getCenter(a, b) {\n  return {\n    x: (b.x + a.x) / 2,\n    y: (b.y + a.y) / 2\n  };\n}\n/**\n *\n * Returns an x,y point once rotated around xMid,yMid\n * @param {number} x\n * @param {number} y\n * @param {number} xMid\n * @param {number} yMid\n * @param {number} degrees\n */\n\n\nfunction rotateAroundMidPoint(x, y, xMid, yMid, degrees) {\n  var cos = Math.cos;\n  var sin = Math.sin;\n  var radian = degrees * Math.PI / 180; // Convert to radians\n  // Subtract midpoints, so that midpoint is translated to origin\n  // and add it in the end again\n\n  var xr = (x - xMid) * cos(radian) - (y - yMid) * sin(radian) + xMid;\n  var yr = (x - xMid) * sin(radian) + (y - yMid) * cos(radian) + yMid;\n  return [xr, yr];\n}\n/**\n *\n * Returns the new bounding area of a rotated rectangle.\n * @param {number} width\n * @param {number} height\n * @param {number} rotation\n */\n\n\nfunction translateSize(width, height, rotation) {\n  var centerX = width / 2;\n  var centerY = height / 2;\n  var outerBounds = [rotateAroundMidPoint(0, 0, centerX, centerY, rotation), rotateAroundMidPoint(width, 0, centerX, centerY, rotation), rotateAroundMidPoint(width, height, centerX, centerY, rotation), rotateAroundMidPoint(0, height, centerX, centerY, rotation)];\n\n  var _outerBounds$reduce = outerBounds.reduce(function (res, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        x = _ref2[0],\n        y = _ref2[1];\n\n    return {\n      minX: Math.min(x, 'minX' in res ? res.minX : x),\n      maxX: Math.max(x, 'maxX' in res ? res.maxX : x),\n      minY: Math.min(y, 'minY' in res ? res.minY : y),\n      maxY: Math.max(y, 'maxY' in res ? res.maxY : y)\n    };\n  }, {}),\n      minX = _outerBounds$reduce.minX,\n      maxX = _outerBounds$reduce.maxX,\n      minY = _outerBounds$reduce.minY,\n      maxY = _outerBounds$reduce.maxY;\n\n  return {\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}"]},"metadata":{},"sourceType":"script"}